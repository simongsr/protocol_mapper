from django.contrib.auth.models import User
from django.db import models

__author__  = 'ProtocolMapper by Simone Pandolfi'
__email__   = 'simopandolfi@gmail.com'
{% if version is defined %}
__version__ = {{ version }}
{% endif %}

""" This file was generated by ProtocolMapper
    Checkout the repo for more informations [https://github.com/simongsr/protocol_mapper]
"""


{%- macro make_enum(enum) %}
{% for key, value in enum['items'].items() %}
{{ key|upper }} = {{ value|upper }}
{% endfor %}
{{ enum.name|upper }} = (
    {% for key, value in enum['items'].items() %}
    ({{ key|upper }}, {{ value }}),
    {% endfor %}
)
{% endmacro -%}


{%- macro make_model(model) %}
{% if ('python_django__builtin' not in model.modifiers and 'builtin' not in model.modifiers) or model.modifiers.python_django__builtin == False or model.modifiers.builtin == False %}
class {{ model.fullname|join('__') }}(models.Model):
    {% for obj in model.objects.values() if obj.type == 'enum' %}

    {{ make_enum(obj)|indent }}

    {% endfor %}
    {% for field in model.fields.values() if field.id > 0 %}
    {{ field.name }} = {{ field|python_django.field_declaration }}
    {% endfor %}

    def __str__(self):
        return '{{ model.fullname|join("__") }}: {0}'.format(self.id)

    {% for field in model.fields.values() if field.id > 0 and field.multiplicity in ('optional', 'required') and field.data_type.type == 'model' %}
    @classmethod
    def get_{{ field.name }}_class(cls):
        return {{ field.data_type.fullname|join('__') }}
    {% endfor %}
    {% for field in model.fields.values() if field.id > 0 and field.multiplicity == 'repeated' and field.data_type is string %}

    @classmethod
    def get_{{ field.name }}_class(cls):
        return __{{ field.model.fullname|join('__') }}___{{ field.name }}
    {% endfor %}

    {% for _model in model|core.nested_models %}

{{ make_model(_model) }}
    {%- endfor %}
    {% for field in model.fields.values() if field.id > 0 and field.multiplicity == 'repeated' and field.data_type is string %}

class __{{ field.model.fullname|join('__') }}___{{ field.name }}(models.Model):
    value = models.{{ field.data_type|python_django.map_data_type }}()

    def __str__(self):
        return '__{{ field.model.fullname|join("__") }}___{{ field.name }}: {0}'.format(self.id)
    {% endfor %}
{% endif %}
{% endmacro %}


{% macro make_message(message) %}
class {{ message.fullname|join('__') }}:
    def __init__(self):
        {% for field in message.fields.values() %}
        self.__{{ field.name }} = None
        {% endfor %}

    {% for field in message.fields.values() %}
    @property
    def {{field.name}}(self):
        return self.__{{ field.name }}

    @{{ field.name }}.setter
    def {{ field.name }}(self, value):
        if not isinstance(value, {{ field.data_type|python.map_data_type }}):
            raise TypeError("Expected '{{ field.name }}' is a {{ field.data_type|python.map_data_type }}, got: {0}".format(type(value).__name__))
        self.__{{ field.name }} = value

    {% endfor %}
    {% for modelname, fieldlist in (message|core.map_message_field_to_model).items() %}
    def load_model_{{ modelname|replace('.', '__') }}(self, model):
        if not isinstance(model, {{ modelname|replace('.', '__') }}):
            raise TypeError("Model must be an instance of {{ modelname|replace('.', '__') }}, got: {0}".format(type(model).__name__))

        {% for field in fieldlist %}
        self.{{ field.name }} = model.{{ field.model_field.name }}
        {% endfor %}

    {% endfor %}
{% endmacro %}



{% for model in models %}
{{ make_model(model) }}
{% endfor -%}

{% for message in messages %}
{{ make_message(message) }}
{% endfor %}
